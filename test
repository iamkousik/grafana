def AccountingWebApiEnvFileName = ".\\${params.AccountingWebApiFile}\\image.properties"
def bffEnvFileName              = ".\\${params.bffFile}\\image.properties"
def CRMRestApiEnvFileName       = ".\\${params.CRMRestApiFile}\\image.properties"
def DIURestApiEnvFileName       = ".\\${params.DIURestApiFile}\\image.properties"
def DIUAntivirusEnvFileName     = ".\\${params.DIUAntivirusFile}\\image.properties"
def FPMEnvFileName              = ".\\${params.FPMFile}\\image.properties"
def SignalREnvFileName          = ".\\${params.SignalRFile}\\image.properties"
def RSDeliveryEnvFileName       = ".\\${params.RSDeliveryFile}\\image.properties"
def RSExportEnvFileName         = ".\\${params.RSExportFile}\\image.properties"
def RSImportEnvFileName         = ".\\${params.RSImportFile}\\image.properties"
def RWExcelAddInEnvFileName     = ".\\${params.RWExcelAddInFile}\\image.properties"
def RWWebApiEnvFileName         = ".\\${params.RWWebApiFile}\\image.properties"
def SchedulerEnvFileName        = ".\\${params.SchedulerFile}\\image.properties"

pipeline {
    agent {
        label 'master'
    }
    options {
    	buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
    }
    parameters { 
      string(name: 'RepositoryURL', defaultValue: 'https://bitbucket.fis.dev/scm/investran/investraninv.git',  description: 'Bitbucket repository URL.')
      string(name: 'BranchName',  defaultValue: 'development',  description: 'Bitbucket repository branch name.')
      string(name: 'BitBucketCredential',  defaultValue: 'manish-cred',  description: 'Bitbucket repository branch name.')
      string(name: 'AccountingWebApiFile',  defaultValue: '.\\docker\\InfinityOAT2\\Accounting-WebApi',  description: 'AccountingWebApi docker-compose.yaml file')
      string(name: 'AccountingWebApiDir',  defaultValue: 'Accounting-WebApi',  description: 'AccountingWebApi Directory Name')
      string(name: 'bffFile',  defaultValue: '.\\docker\\InfinityOAT2\\bff',  description: 'bff docker-compose.yaml file')
      string(name: 'bffDir',  defaultValue: 'bff',  description: 'bff Directory Name')
      string(name: 'CRMRestApiFile',  defaultValue: '.\\docker\\InfinityOAT2\\CRM-RestApi',  description: 'CRMRestApi docker-compose.yaml file')
      string(name: 'CRMRestApiDir',  defaultValue: 'CRM-RestApi',  description: 'CRMRestApi Directory Name')
      string(name: 'DIURestApiFile',  defaultValue: '.\\docker\\InfinityOAT2\\DIU-RestApi',  description: 'DIURestApi docker-compose.yaml file')
      string(name: 'DIURestApiDir',  defaultValue: 'DIU-RestApi',  description: 'DIURestApi Directory Name')
      string(name: 'DIUAntivirusFile',  defaultValue: '.\\docker\\InfinityOAT2\\DIUAntivirus-Service',  description: 'DIUAntivirusFile docker-compose.yaml file')
      string(name: 'DIUAntivirusDir',  defaultValue: 'DIUAntivirus-Service',  description: 'DIUAntivirusFile Directory Name')
      string(name: 'FPMFile',  defaultValue: '.\\docker\\InfinityOAT2\\FPM-Service',  description: 'FPM docker-compose.yaml file')
      string(name: 'FPMDir',  defaultValue: 'FPM-Service',  description: 'FPM Directory Name')
      string(name: 'SignalRFile',  defaultValue: '.\\docker\\InfinityOAT2\\Investran-SignalR',  description: 'SignalR docker-compose.yaml file')
      string(name: 'SignalRDir',  defaultValue: 'Investran-SignalR',  description: 'SignalR Directory Name')
      string(name: 'RSDeliveryFile',  defaultValue: '.\\docker\\InfinityOAT2\\RS-Delivery',  description: 'RSDelivery docker-compose.yaml file')
      string(name: 'RSDeliveryDir',  defaultValue: 'RS-Delivery',  description: 'RSDelivery Directory Name')
      string(name: 'RSExportFile',  defaultValue: '.\\docker\\InfinityOAT2\\RS-ExportService',  description: 'RSExport docker-compose.yaml file')
      string(name: 'RSExportDir',  defaultValue: 'RS-ExportService',  description: 'RSExport Directory Name')
      string(name: 'RSImportFile',  defaultValue: '.\\docker\\InfinityOAT2\\RS-ImportService',  description: 'RSImport docker-compose.yaml file')
      string(name: 'RSImportDir',  defaultValue: 'RS-ImportService',  description: 'RSImport Directory Name')
      string(name: 'RWExcelAddInFile',  defaultValue: '.\\docker\\InfinityOAT2\\RW-ExcelAddIn',  description: 'RWExcelAddIn docker-compose.yaml file')
      string(name: 'RWExcelAddInDir',  defaultValue: 'RW-ExcelAddIn',  description: 'RWExcelAddIn Directory Name')
      string(name: 'RWWebApiFile',  defaultValue: '.\\docker\\InfinityOAT2\\RW-WebApi',  description: 'RWWebApi docker-compose.yaml file')
      string(name: 'RWWebApiDir',  defaultValue: 'RW-WebApi',  description: 'RWWebApi Directory Name')
      string(name: 'SchedulerFile',  defaultValue: '.\\docker\\InfinityOAT2\\Scheduler-Service',  description: 'Scheduler docker-compose.yaml file')
      string(name: 'SchedulerDir',  defaultValue: 'Scheduler-Service',  description: 'Scheduler Directory Name')
      credentials(
        credentialType: 'com.cloudbees.jenkins.plugins.sshcredentials.SSHUserPrivateKey',
        defaultValue: 'rundeck',
        description: 'The credentials needed to deploy.',
        name: 'deployCredentialsId',
        required: true
      )
    }                 
    stages {
        stage ('Source Code Checkout') {
            steps {
	          dir ("${WORKSPACE}") {
                cleanWs()
                checkout scm: [$class: 'GitSCM', userRemoteConfigs: [[url: "${params.RepositoryURL}", credentialsId: "${params.BitBucketCredential}"]],
                branches: [[name: "${params.BranchName}"]]], poll: false
                    load "./${AccountingWebApiEnvFileName}"                
                    load "./${bffEnvFileName}"             
                    load "./${CRMRestApiEnvFileName}"             
                    load "./${DIURestApiEnvFileName}"             
                    load "./${DIUAntivirusEnvFileName}"             
                    load "./${FPMEnvFileName}"             
                    load "./${SignalREnvFileName}"             
                    load "./${RSDeliveryEnvFileName}"             
                    load "./${RSExportEnvFileName}"             
                    load "./${RSImportEnvFileName}"             
                    load "./${RWExcelAddInEnvFileName}"             
                    load "./${RWWebApiEnvFileName}"             
                    load "./${SchedulerEnvFileName}"             
                }
            }
        }        
	      stage('Modify Docker Deployment') {
          steps {
            dir ("${WORKSPACE}") {
            powershell script:
            """
	          (Get-Content -path $params.AccountingWebApiFile\\docker-compose-base.yml -Raw).replace('\${RepositoryName}', '$env.AccountingWebApi_RepositoryName') | Set-Content -path $params.AccountingWebApiFile\\docker-compose-base.yml
            (Get-Content -path $params.AccountingWebApiFile\\docker-compose-base.yml -Raw).replace('\${ImageVersion}', '$env.AccountingWebApi_image_version') | Set-Content -path $params.AccountingWebApiFile\\docker-compose-base.yml
            cat $params.AccountingWebApiFile\\docker-compose-base.yml
	          (Get-Content -path $params.bffFile\\docker-compose-base.yml -Raw).replace('\${RepositoryName}', '$env.bff_RepositoryName') | Set-Content -path $params.bffFile\\docker-compose-base.yml
            (Get-Content -path $params.bffFile\\docker-compose-base.yml -Raw).replace('\${ImageVersion}', '$env.bff_image_version') | Set-Content -path $params.bffFile\\docker-compose-base.yml
            cat $params.bffFile\\docker-compose-base.yml
	          (Get-Content -path $params.CRMRestApiEnvFileName\\docker-compose-base.yml -Raw).replace('\${RepositoryName}', '$env.CRMRestApi_RepositoryName') | Set-Content -path $params.CRMRestApiEnvFileName\\docker-compose-base.yml
            (Get-Content -path $params.CRMRestApiEnvFileName\\docker-compose-base.yml -Raw).replace('\${ImageVersion}', '$env.CRMRestApi_image_version') | Set-Content -path $params.CRMRestApiEnvFileName\\docker-compose-base.yml
            cat $params.CRMRestApiEnvFileName\\docker-compose-base.yml
	          (Get-Content -path $params.DIURestApiEnvFileName\\docker-compose-base.yml -Raw).replace('\${RepositoryName}', '$env.DIURestApi_RepositoryName') | Set-Content -path $params.DIURestApiEnvFileName\\docker-compose-base.yml
            (Get-Content -path $params.DIURestApiEnvFileName\\docker-compose-base.yml -Raw).replace('\${ImageVersion}', '$env.DIURestApi_image_version') | Set-Content -path $params.DIURestApiEnvFileName\\docker-compose-base.yml
            cat $params.DIURestApiEnvFileName\\docker-compose-base.yml
	          (Get-Content -path $params.DIUAntivirusEnvFileName\\docker-compose-base.yml -Raw).replace('\${RepositoryName}', '$env.DIUAntivirus_RepositoryName') | Set-Content -path $params.DIUAntivirusEnvFileName\\docker-compose-base.yml
            (Get-Content -path $params.DIUAntivirusEnvFileName\\docker-compose-base.yml -Raw).replace('\${ImageVersion}', '$env.DIUAntivirus_image_version') | Set-Content -path $params.DIUAntivirusEnvFileName\\docker-compose-base.yml
            cat $params.DIUAntivirusEnvFileName\\docker-compose-base.yml
	          (Get-Content -path $params.FPMEnvFileName\\docker-compose-base.yml -Raw).replace('\${RepositoryName}', '$env.FPM_RepositoryName') | Set-Content -path $params.FPMEnvFileName\\docker-compose-base.yml
            (Get-Content -path $params.FPMEnvFileName\\docker-compose-base.yml -Raw).replace('\${ImageVersion}', '$env.FPM_image_version') | Set-Content -path $params.FPMEnvFileName\\docker-compose-base.yml
            cat $params.FPMEnvFileName\\docker-compose-base.yml
	          (Get-Content -path $params.SignalREnvFileName\\docker-compose-base.yml -Raw).replace('\${RepositoryName}', '$env.SignalR_RepositoryName') | Set-Content -path $params.SignalREnvFileName\\docker-compose-base.yml
            (Get-Content -path $params.SignalREnvFileName\\docker-compose-base.yml -Raw).replace('\${ImageVersion}', '$env.SignalR_image_version') | Set-Content -path $params.SignalREnvFileName\\docker-compose-base.yml
            cat $params.SignalREnvFileName\\docker-compose-base.yml
	          (Get-Content -path $params.RSDeliveryEnvFileName\\docker-compose-base.yml -Raw).replace('\${RepositoryName}', '$env.RSDelivery_RepositoryName') | Set-Content -path $params.RSDeliveryEnvFileName\\docker-compose-base.yml
            (Get-Content -path $params.RSDeliveryEnvFileName\\docker-compose-base.yml -Raw).replace('\${ImageVersion}', '$env.RSDelivery_image_version') | Set-Content -path $params.RSDeliveryEnvFileName\\docker-compose-base.yml
            cat $params.RSDeliveryEnvFileName\\docker-compose-base.yml
	          (Get-Content -path $params.RSExportEnvFileName\\docker-compose-base.yml -Raw).replace('\${RepositoryName}', '$env.RSExport_RepositoryName') | Set-Content -path $params.RSExportEnvFileName\\docker-compose-base.yml
            (Get-Content -path $params.RSExportEnvFileName\\docker-compose-base.yml -Raw).replace('\${ImageVersion}', '$env.RSExport_image_version') | Set-Content -path $params.RSExportEnvFileName\\docker-compose-base.yml
            cat $params.RSExportEnvFileName\\docker-compose-base.yml
	          (Get-Content -path $params.RSImportEnvFileName\\docker-compose-base.yml -Raw).replace('\${RepositoryName}', '$env.RSImport_RepositoryName') | Set-Content -path $params.RSImportEnvFileName\\docker-compose-base.yml
            (Get-Content -path $params.RSImportEnvFileName\\docker-compose-base.yml -Raw).replace('\${ImageVersion}', '$env.RSImport_image_version') | Set-Content -path $params.RSImportEnvFileName\\docker-compose-base.yml
            cat $params.RSImportEnvFileName\\docker-compose-base.yml
	          (Get-Content -path $params.RWExcelAddInEnvFileName\\docker-compose-base.yml -Raw).replace('\${RepositoryName}', '$env.RWExcelAddIn_RepositoryName') | Set-Content -path $params.RWExcelAddInEnvFileName\\docker-compose-base.yml
            (Get-Content -path $params.RWExcelAddInEnvFileName\\docker-compose-base.yml -Raw).replace('\${ImageVersion}', '$env.RWExcelAddIn_image_version') | Set-Content -path $params.RWExcelAddInEnvFileName\\docker-compose-base.yml
            cat $params.RWExcelAddInEnvFileName\\docker-compose-base.yml
	          (Get-Content -path $params.RWWebApiEnvFileName\\docker-compose-base.yml -Raw).replace('\${RepositoryName}', '$env.RWWebApi_RepositoryName') | Set-Content -path $params.RWWebApiEnvFileName\\docker-compose-base.yml
            (Get-Content -path $params.RWWebApiEnvFileName\\docker-compose-base.yml -Raw).replace('\${ImageVersion}', '$env.RWWebApi_image_version') | Set-Content -path $params.RWWebApiEnvFileName\\docker-compose-base.yml
            cat $params.RWWebApiEnvFileName\\docker-compose-base.yml
	          (Get-Content -path $params.SchedulerEnvFileName\\docker-compose-base.yml -Raw).replace('\${RepositoryName}', '$env.Scheduler_RepositoryName') | Set-Content -path $params.SchedulerEnvFileName\\docker-compose-base.yml
            (Get-Content -path $params.SchedulerEnvFileName\\docker-compose-base.yml -Raw).replace('\${ImageVersion}', '$env.Scheduler_image_version') | Set-Content -path $params.SchedulerEnvFileName\\docker-compose-base.yml
            cat $params.SchedulerEnvFileName\\docker-compose-base.yml
            """
            }
          }
	      }
        stage('Docker Cluster Deployment') {
          steps {
            script {
              def remote = [:]
                  remote.name = "$env.name"
                  remote.host = "$env.hostname"
                  remote.allowAnyHosts = true
              withCredentials([sshUserPrivateKey(credentialsId: '${deployCredentialsId}', 
                        keyFileVariable: 'JENKINS_PRIVATE_KEY', usernameVariable: 'USERNAME')]) {
                 remote.user = USERNAME
                 remote.identityFile = JENKINS_PRIVATE_KEY
            dir ("${WORKSPACE}") {
	          sshCommand remote: remote, command: "mkdir -p /tmp/dockerfiles"
            sshPut remote: remote, from: "${params.AccountingWebApiFile}", into: "/tmp/dockerfiles/"
            sshCommand remote: remote, command: "cd /tmp/dockerfiles/${params.AccountingWebApiDir}; dos2unix Docker_Deployment.sh; sh Docker_Deployment.sh $env.AccountingWebApi_RepositoryName:$env.AccountingWebApi_image_version $env.AccountingWebApi_ApplicationName"
            sshCommand remote: remote, command: "cd /tmp/dockerfiles/${params.bffDir}; dos2unix Docker_Deployment.sh; sh Docker_Deployment.sh $env.bff_RepositoryName:$env.bff_image_version $env.bff_ApplicationName"
            sshCommand remote: remote, command: "cd /tmp/dockerfiles/${params.CRMRestApiDir}; dos2unix Docker_Deployment.sh; sh Docker_Deployment.sh $env.CRMRestApi_RepositoryName:$env.CRMRestApi_image_version $env.CRMRestApi_ApplicationName"
            sshCommand remote: remote, command: "cd /tmp/dockerfiles/${params.DIURestApiDir}; dos2unix Docker_Deployment.sh; sh Docker_Deployment.sh $env.DIURestApi_RepositoryName:$env.DIURestApi_image_version $env.DIURestApi_ApplicationName"
            sshCommand remote: remote, command: "cd /tmp/dockerfiles/${params.DIUAntivirusDir}; dos2unix Docker_Deployment.sh; sh Docker_Deployment.sh $env.DIUAntivirus_RepositoryName:$env.DIUAntivirus_image_version $env.DIUAntivirus_ApplicationName"
            sshCommand remote: remote, command: "cd /tmp/dockerfiles/${params.FPMDir}; dos2unix Docker_Deployment.sh; sh Docker_Deployment.sh $env.FPM_RepositoryName:$env.FPM_image_version $env.FPM_ApplicationName"
            sshCommand remote: remote, command: "cd /tmp/dockerfiles/${params.SignalRDir}; dos2unix Docker_Deployment.sh; sh Docker_Deployment.sh $env.SignalR_RepositoryName:$env.SignalR_image_version $env.SignalR_ApplicationName"
            sshCommand remote: remote, command: "cd /tmp/dockerfiles/${params.RSDeliveryDir}; dos2unix Docker_Deployment.sh; sh Docker_Deployment.sh $env.RSDelivery_RepositoryName:$env.RSDelivery_image_version $env.RSDelivery_ApplicationName"
            sshCommand remote: remote, command: "cd /tmp/dockerfiles/${params.RSExportDir}; dos2unix Docker_Deployment.sh; sh Docker_Deployment.sh $env.RSExport_RepositoryName:$env.RSExport_image_version $env.RSExport_ApplicationName"
            sshCommand remote: remote, command: "cd /tmp/dockerfiles/${params.RSImportDir}; dos2unix Docker_Deployment.sh; sh Docker_Deployment.sh $env.RSImport_RepositoryName:$env.RSImport_image_version $env.RSImport_ApplicationName"
            sshCommand remote: remote, command: "cd /tmp/dockerfiles/${params.RWExcelAddInDir}; dos2unix Docker_Deployment.sh; sh Docker_Deployment.sh $env.RWExcelAddIn_RepositoryName:$env.RWExcelAddIn_image_version $env.RWExcelAddIn_ApplicationName"
            sshCommand remote: remote, command: "cd /tmp/dockerfiles/${params.RWWebApiDir}; dos2unix Docker_Deployment.sh; sh Docker_Deployment.sh $env.RWWebApi_RepositoryName:$env.RWWebApi_image_version $env.RWWebApi_ApplicationName"
            sshCommand remote: remote, command: "cd /tmp/dockerfiles/${params.SchedulerDir}; dos2unix Docker_Deployment.sh; sh Docker_Deployment.sh $env.Scheduler_RepositoryName:$env.Scheduler_image_version $env.Scheduler_ApplicationName"
            sshRemove remote: remote, path: "/tmp/dockerfiles"
              }
            }
          }
        }
      }
    }     
    post { 
        always {
	        sleep 5
          cleanWs()
        }
    }    
}
